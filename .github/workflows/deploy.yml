name: Deploy React App

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      BASE_SHA: ${{ github.event.before }}
      HEAD_SHA: ${{ github.sha }}
      APP_DIR: ${{ secrets.APP_DIR || 'gogrub-frontend' }}
      COMPOSE_FILE: ${{ secrets.COMPOSE_FILE || 'docker-compose.deploy.yml' }}
      SERVICE_NAME: ${{ secrets.SERVICE_NAME || 'assets' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---- CI sanity checks (catch TS/build errors early) ----
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install deps
        run: yarn install --frozen-lockfile

      - name: Typecheck + Build (CI)
        run: |
          yarn tsc --noEmit
          yarn build

      # ---- Determine if a rebuild is needed (frontend-related changes) ----
      - name: Detect changed files
        id: changes
        run: |
          CHANGED="$(git diff --name-only "${BASE_SHA}" "${HEAD_SHA}")"
          echo "changed<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Should rebuild image?
        id: should_rebuild
        run: |
          set -e
          CHANGED="${{ steps.changes.outputs.changed }}"
          echo "Changed files:"
          echo "$CHANGED"

          # Rebuild if app code, assets, config, or Docker bits changed
          if echo "$CHANGED" | grep -qE '^(src/|public/|package\.json|yarn\.lock|vite\.config\.(ts|js)|tsconfig\.(json|tsconfig\.json)|Dockerfile|react\.Dockerfile|.dockerignore)'; then
            echo "rebuild=true" >> $GITHUB_OUTPUT
          else
            echo "rebuild=false" >> $GITHUB_OUTPUT
          fi

      # ---- SSH setup ----
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.PROD_SERVER_IP }}" >> ~/.ssh/known_hosts

      # ---- Deploy on the server ----
      - name: Deploy over SSH
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.PROD_SERVER_IP }} <<'EOF'
            set -euo pipefail

            APP_DIR="${{ env.APP_DIR }}"
            COMPOSE_FILE="${{ env.COMPOSE_FILE }}"
            SERVICE="${{ env.SERVICE_NAME }}"

            echo "‚Üí cd \$APP_DIR"
            cd "\$APP_DIR"

            echo "‚Üí git pull origin deploy"
            git pull origin deploy

            if [ "${{ steps.should_rebuild.outputs.rebuild }}" = "true" ]; then
              echo "üî® Changes detected in frontend ‚Äî rebuilding image‚Ä¶"
              docker compose -f "\$COMPOSE_FILE" build --pull "\$SERVICE"
            else
              echo "‚ö° No rebuild needed ‚Äî using existing image."
            fi

            echo "üöÄ Starting/Updating service‚Ä¶"
            docker compose -f "\$COMPOSE_FILE" up -d "\$SERVICE"

            echo "‚úÖ Deployed \${SERVICE}"
          EOF

      # ‚úÖ EMAIL NOTIFICATIONS (via dawidd6/action-send-mail)
      - name: Send success email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.zeptomail.com
          server_port: 587
          secure: false
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚úÖ GoGrub Frontend Deployment Successful (branch: ${{ github.ref_name }})"
          to: ${{ secrets.NOTIFY_EMAIL_TO }}
          from: GoGrub CI <noreply@scriptdeskng.com>
          body: |
            Deployment succeeded.

            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            When: ${{ github.event.head_commit.timestamp }}
          nodemailerdebug: true 

      - name: Send failure email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.zeptomail.com
          server_port: 587
          secure: false
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "‚ùå GoGrub Frontend Deployment Failed (branch: ${{ github.ref_name }})"
          to: ${{ secrets.NOTIFY_EMAIL_TO }}
          from: GoGrub CI <noreply@scriptdeskng.com>
          body: |
            Deployment FAILED.

            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Check the GitHub Actions logs for details.
          nodemailerdebug: true 